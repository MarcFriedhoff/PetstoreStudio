name: APIM Build & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "prod"
        type: choice
        options: [dev, test, prod]

concurrency:
  group: apim-${{ github.ref }}-deploy
  cancel-in-progress: false

permissions:
  contents: read

env:
  APIM_WORKDIR: .
  NODE_VERSION: "20.15.0"

jobs:
  build:
    name: Build APIM project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Use cache only if a lockfile exists to avoid "Dependencies lock file is not found"
      - name: Setup Node.js (with cache)
        if: ${{ hashFiles(format('{0}/package-lock.json', env.APIM_WORKDIR), format('{0}/npm-shrinkwrap.json', env.APIM_WORKDIR), format('{0}/yarn.lock', env.APIM_WORKDIR)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            ${{ env.APIM_WORKDIR }}/package-lock.json
            ${{ env.APIM_WORKDIR }}/npm-shrinkwrap.json
            ${{ env.APIM_WORKDIR }}/yarn.lock

      - name: Setup Node.js (no cache)
        if: ${{ hashFiles(format('{0}/package-lock.json', env.APIM_WORKDIR), format('{0}/npm-shrinkwrap.json', env.APIM_WORKDIR), format('{0}/yarn.lock', env.APIM_WORKDIR)) == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build with apim-cli
        working-directory: ${{ env.APIM_WORKDIR }}
        run: |
          npx -y @apistudio/apim-cli --version
          mkdir -p builds
          npx -y @apistudio/apim-cli build --all --localDir . --output ./builds/project_build.zip
          ls -la builds

      - name: Upload build artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: apim-build
          path: builds/project_build.zip
          if-no-files-found: error

  deploy:
    name: Deploy APIM project
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'prod' }}
    concurrency:
      group: apim-deploy-${{ inputs.environment || 'prod' }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: apim-build
          path: ./_downloads

      - name: Unzip artifact to deploy dir
        run: |
          mkdir -p _apim_build
          unzip -o ./_downloads/project_build.zip -d ./_apim_build
          ls -la _apim_build

      - name: Deploy with apim-cli
        env:
          APIM_BASE_URL: ${{ secrets.APIM_BASE_URL }}   # e.g. https://apim.example.com
          APIM_ORG:       ${{ secrets.APIM_ORG }}
          APIM_USERNAME:  ${{ secrets.APIM_USERNAME }}
          APIM_PASSWORD:  ${{ secrets.APIM_PASSWORD }}
          APIM_TOKEN:     ${{ secrets.APIM_TOKEN }}
        run: |
          AUTH_FLAGS=""
          if [ -n "$APIM_TOKEN" ]; then
            AUTH_FLAGS="--token \"$APIM_TOKEN\""
          elif [ -n "$APIM_USERNAME" ] && [ -n "$APIM_PASSWORD" ]; then
            AUTH_FLAGS="--username \"$APIM_USERNAME\" --password \"$APIM_PASSWORD\""
          fi

          ORG_FLAG=""
          if [ -n "$APIM_ORG" ]; then
            ORG_FLAG="--org \"$APIM_ORG\""
          fi

          BUILD_PATH_FLAG="--path ./_apim_build"

          npx -y @apistudio/apim-cli --version
          npx -y @apistudio/apim-cli deploy project \
            --url "$APIM_BASE_URL" \
            $ORG_FLAG \
            $AUTH_FLAGS \
            $BUILD_PATH_FLAG
